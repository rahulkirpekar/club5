Exception:- Abnormal Scenario.(Exceptional Things.)
------------

	Statement----1
	Statement----2
	Statement----3
	Statement----4
	Statement----5

	10 / 0;// ArithmeticException--(class)---[Code Crashed]---JVM Terminate

	Statement----6
	Statement----7
	Statement----8
	Statement----9
	Statement----10
-----------------------------------------------------------------------------------------------------------------------------
					Type of Exception
					------------------		
	-----------------------					-----------------------
	1) Checked Exception					2) UnChecked Exception
	-----------------------					-----------------------	
	===> CompileTime Exception				===> RunTime Exception
	-----------------------					-----------------------	
	     (Raised By Compiler at CompileTime)		(Raised By JVM at Runtime)

Example:-						Example:-
---------						---------
	===>SQLException					===> ArithmeticException
	===>FileNotFOundException				===> ArrayIndexOufofBoundException
	===>ClassNotFoundException				===> StringIndexOufofBoundException
	===>....						===> NullPointerException
								===> NumberFormateException
								===> ClassCastException
								===>...
----------------------------------------------------------------------------------------------------------------

					Hierarchy of Exception
					----------------------	

					Object(C)
					  |
					Throwable(C)
					  |
				----------------------------------------------------------				
				|							|
			    Exception(C)					      Error(C)
			    (recoverable)					     (irrecoverable)--(Not recoved)		
				|							|
	    ----------------------------------------------------------		  ===> StackOverflowError	
	    |--checked Exception				|		  ===> AssertionError		
===>SQLException  					RuntimeException(C)	
===>FileNotFOundException					|----UnChecked Exception
===>ClassNotFoundException				===> ArithmeticException
===>....						===> ArrayIndexOufofBoundException
							===> StringIndexOufofBoundException
							===> NullPointerException	
							===> NumberFormateException
							===> ClassCastException	
							===>...
Exception Handling:
-------------------
		----> Exception is recoverable By Exception Handling code[try..catch]

	try
	{
		// raise---->code exception 

	}catch(ExceptionClassName e)
	{
		// handled---catch block 
		e.printStackTrace();// display---->>[exception error log]	
	}





	Statement----1
	Statement----2
	Statement----3
	Statement----4
	Statement----5

		10 / 0;// ArithmeticException--(class)---[Code Crashed]---JVM Terminate

	Statement----6
	Statement----7
	Statement----8
	Statement----9
	Statement----10

















// Java---7 |

catch(ArithmeticException |NullPointerException | ArrayIndexOutOfBoundsException e) 
		{
			System.out.println("In Catch Block ---" + e.getClass().getName() +" Handled By Catch Block");
			e.printStackTrace();
		}
-----------------------------
Exception Part-1 

https://us02web.zoom.us/rec/share/Lyj_3EPZjq5q4sSdTKJUzgjWjZyGWuXOopf961dbVS5fnRQq7tN9CfQxWxqbmgOh.K9W5bMgZIXY3TK7O 
Passcode: ck#t2Q5z
-----------------------------



							








	===> Nested try..catch

		try
		{
			try
			{
			}catch()
			{

			}
		}catch()
		{

		}

	===> finally block

1)
	try
	{
	}catch()
	{
	}finally
	{
	}
------------------
2) 
	try
	{
	}catch()
	{
	}catch()
	{
	}finally
	{
	}
----------------
3)
	try
	{
		try
		{
		}catch()
		{
		}
	}catch()
	{
	}catch()
	{
	}finally
	{
	}
--------------------
4) 

	try---code raise exception

	catch---exception handled

	finally----code execute

	try
	{
		// raised exception 
	}finally
	{
		
	}
--------------------
5)
	try
	{
		// raised exception 
	}catch()
	{
		
	}	
--------------------
6) Not Possible 

	catch()
	{
	}finally
	{
	}
7) Not Possible 

	try
	{
	}
	catch()
	{
	}finally
	{
	}finally
	{
	}
--------------------
8)
	try
	{
		try
		{
		}catch()
		{
		}finally
		{
		}
	}catch()
	{
	}finally
	{
	}

------------------
	===> throw
	===> throws
	===> customException
	===> method overrdding with exception























package exceptiontopic.unchecked;

// 1) checked Exception
//public class InvalidAgeException extends Exception



// 2) Unchecked Exception
public class InvalidAgeException extends RuntimeException
{
	InvalidAgeException(String msg)
	{
		super(msg);
	}
}



Exception Handling with Method Overriding in Java
*****************************************************

1) If the superclass method does not declare an exception
	===> subclass overridden method cannot declare the checked exception but it can declare unchecked exception.



2) If the superclass method declares an exception
	===> subclass overridden method can declare same, 
	===> subclass exception 
	===> or no exception 
	===> but cannot declare parent exception.








